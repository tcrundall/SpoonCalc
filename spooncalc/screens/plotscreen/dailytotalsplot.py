import math
from collections import defaultdict
from enum import Enum
from typing import (
    Dict,
    List,
)

from kivy import utils
from kivy_garden.graph import (
    Graph,
    LinePlot,
)

from spooncalc.dbtools import Database
from spooncalc.models.activitylog import (
    QUALIFIERS,
    ActivityLog,
)

# Manual color cycle for plots
# 12 distinct colors generated by https://mokole.com/palette.html
COLORS = [
    "#ffff54",  # laserlemon
    "#00ffff",  # aqua
    "#2f4f4f",  # darkslategray
    "#8b4513",  # saddlebrown
    "#228b22",  # forestgreen
    "#00008b",  # darkblue
    "#ff0000",  # red
    "#00ff00",  # lime
    "#ff00ff",  # fuchsia
    "#1e90ff",  # dodgerblue
    "#ff69b4",  # hotpink
    "#ffe4c4",  # bisque
]


class PlotMode(Enum):
    WEEK = "week"
    MONTH = "month"


class YMode(Enum):
    HOURS = "hours"
    SPOONS = "spoons"


class DailyTotalsPlot:
    """
    Encapsulates data gathering and plot generation displayed
    by PlotScreen
    """

    def __init__(self, db: Database):
        self.db = db
        self.mode = PlotMode.WEEK
        self.ymode = YMode.SPOONS
        self.week_xmax = 0
        self.xmin = -7
        self.xmax = self.week_xmax
        self.max_spoons_persistent = 30
        self.max_hours_persistent = 15
        self.graph = Graph(
            xmin=self.xmin,
            xmax=self.xmax,
            ymin=0,
            ymax=self.max_spoons_persistent,
            border_color=[0, 1, 1, 1],
            tick_color=[0, 1, 1, 0.7],
            x_grid=True,
            y_grid=True,
            draw_border=True,
            x_grid_label=True,
            y_grid_label=True,
            x_ticks_major=1,
            y_ticks_major=5,
        )

        self.plots = {}
        for qual, color in zip(["total", "averaged"] + QUALIFIERS, COLORS):
            self.plots[qual] = LinePlot(color=utils.get_color_from_hex(color), line_width=1.5)

        # By default, only the total is shown
        self.graph.add_plot(self.plots["total"])

        self.logs_by_day: Dict[int, List[ActivityLog]] = {}

        # Nested data dict with structure [Ymode, qual+, day_offset, value]
        self.data: Dict[YMode, Dict[str, Dict[int, float]]] = {
            YMode.SPOONS: {q: defaultdict(float) for q in QUALIFIERS + ["total", "averaged"]},
            YMode.HOURS: {q: defaultdict(float) for q in QUALIFIERS + ["total", "averaged"]},
        }

        self.active = {q: q not in QUALIFIERS for q in QUALIFIERS + ["total"]}

        self.update_plot()

    def update_data(self) -> None:
        for day_offset in range(self.xmin, self.xmax + 1):
            # Fetch missing logs from database
            if day_offset not in self.logs_by_day.keys():
                self.logs_by_day[day_offset] = self.db.get_logs_from_day(day_offset)

                # Collate data into points? Dicts?
                self.data[YMode.HOURS]["total"][day_offset] = sum([log.hours for log in self.logs_by_day[day_offset]])
                self.data[YMode.SPOONS]["total"][day_offset] = sum([log.spoons for log in self.logs_by_day[day_offset]])

                # Collate data into nested dictionary
                for log in self.logs_by_day[day_offset]:
                    # Get all qualifiers
                    for qual in QUALIFIERS:
                        if getattr(log, qual):
                            for ymode in YMode:
                                self.data[ymode][qual][day_offset] += getattr(log, ymode.value)

    def update_plot(self) -> None:
        # Update daily totals line plot
        self.update_data()
        self.graph.xmin = self.xmin
        self.graph.xmax = self.xmax

        for qual, plot in self.plots.items():
            points = [(x, self.data[self.ymode][qual][x]) for x in range(self.xmin, self.xmax + 1)]
            self.plots[qual].points = points

        # ensure a minimum ymax of 11.
        self.graph.ymax = 1.1 * max(self.data[self.ymode]["total"].values())
        self.graph.ymax = max(11.0, self.graph.ymax)

        # # Update averaging line plot
        # average_span = 3
        # xs = [x for x, _ in self.plot.points]
        # ys = [y for _, y in self.plot.points]

        # av_ys = []
        # for i in range(len(ys) + 1 - average_span):
        #     av_ys.append(sum(ys[i:i + average_span]) / average_span)
        # av_xs = xs[1:-1]
        # self.average_plot.points = zip(av_xs, av_ys)

    def apply_qual_mask(self, qual_mask):
        for qual, flag in qual_mask.items():
            # If qual flagged, ensure it's plot is in graph
            if flag:
                if self.plots[qual] not in self.graph.children:
                    self.graph.add_plot(self.plots[qual])
            # If qual not flagged, ensure it's plot is not in graph
            else:
                # import ipdb; ipdb.set_trace()
                if self.plots[qual] in self.graph.plots:
                    self.graph.remove_plot(self.plots[qual])

    def shift_left(self) -> None:
        if self.mode == PlotMode.WEEK:
            self.shift_x_range(-1)
        if self.mode == PlotMode.MONTH:
            self.shift_x_range(-7)

    def shift_right(self) -> None:
        if self.mode == PlotMode.WEEK:
            self.shift_x_range(1)
        if self.mode == PlotMode.MONTH:
            self.shift_x_range(7)

    def shift_x_range(self, shift_size):
        self.xmin += shift_size
        self.xmax += shift_size
        self.update_plot()

    def set_ymode(self, ymode: YMode):
        if ymode == self.ymode:
            return

        self.ymode = ymode
        self.update_plot()

    def set_mode(self, mode: PlotMode):
        if mode == self.mode:
            return

        self.mode = mode
        if mode == PlotMode.WEEK:
            self.xmax = self.xmax - 7  # focus window on second last week
            self.xmin = self.xmax - 7
            self.graph.x_ticks_major = 1
        elif mode == PlotMode.MONTH:
            # Shift xmax to nearest, more positive, multiple of 7,
            # aaaand then add one week
            self.xmax = (math.ceil(self.xmax / 7) + 1) * 7
            self.xmin = self.xmax - 28
            self.graph.x_ticks_major = 7

        self.update_plot()
